{
  "name": "satelize",
  "description": "Get location details (latitude, longitude...) from IP visitor, server side NodeJS module",
  "version": "0.1.0",
  "author": {
    "name": "Julien Valéry",
    "email": "darul75@gmail.com"
  },
  "homepage": "https://github.com/darul75/satelize",
  "repository": {
    "type": "git",
    "url": "https://github.com/darul75/satelize.git"
  },
  "keywords": [
    "ip",
    "location",
    "geolocation",
    "address",
    "nodejs",
    "telize"
  ],
  "main": "./lib/satelize",
  "scripts": {
    "test": "mocha test/*.js"
  },
  "engines": {
    "node": ">=0.6.x"
  },
  "devDependencies": {
    "mocha": "",
    "grunt": "latest",
    "grunt-contrib-jshint": "latest",
    "grunt-contrib-uglify": "latest"
  },
  "bugs": {
    "url": "https://github.com/darul75/satelize/issues"
  },
  "readmeFilename": "README.md",
  "license": "MIT",
  "readme": "# Satelize [![NPM version](https://badge.fury.io/js/satelize.png)](http://badge.fury.io/js/satelize) [![Build Status](https://travis-ci.org/darul75/satelize.png?branch=master)](https://travis-ci.org/darul75/satelize) [![Total views](https://sourcegraph.com/api/repos/github.com/darul75/satelize/counters/views.png)](https://sourcegraph.com/github.com/darul75/satelize)\r\n\r\n**Satelize** NodeJS module to retrieve user location information based on IP, combined with expressjs for instance make life easier to get some stuff as latitude/longitude of your visitor.\r\n\r\nInspired and using http://www.telize.com/ service. Free today.\r\n\r\nYou will find informations there too.\r\n\r\n## Why ?\r\n\r\nBecause ecchymose in the nose. I needed something but on server side.\r\n\r\nWith expressjs for instance, you can get your request IP, then just need to use this library that will make the call to get user location data.\r\n\r\nAnd it is done.\r\n\r\n## Demo\r\n\r\nhttp://darul-demo.herokuapp.com/satelize\r\n\r\n## Install\r\n\r\n~~~\r\nnpm install satelize\r\n~~~\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar satelize = require('satelize');\r\n\r\n// Example retrieve IP from request\r\n// var ip = req.header('x-forwarded-for') || req.connection.remoteAddress;\r\n\r\n// then satelize call \r\n\r\nsatelize.satelize({ip:'46.19.37.108'}, function(err, geoData) {\r\n  // process err\r\n  \r\n  // if data is JSON, we may wrap it in js object\r\n  var obj = JSON.parse(geoData);\r\n  \r\n  \r\n  // if used with expressjs\r\n  // res.send(geoData);\r\n  // res.json...\r\n});\r\n    \r\n    \r\n// MORE EXAMPLES\r\n\r\nsatelize.satelize({ip:'46.19.37.108'}, function(err, geoData) {\r\n}); // json output for this ip\r\n\r\nsatelize.satelize({ip:'46.19.37.108', JSONP: true}, function(err, geoData) {\r\n}); // jsonp output for this ip\r\n\r\nsatelize.satelize({}, function(err, geoData) {\r\n}); // json output request ip, meaning server\r\n\r\nsatelize.satelize({JSONP: true}, function(err, geoData) {\r\n}); // jsonp output request ip\r\n```    \r\n    \r\n## Return    \r\n\r\n~~~ json\r\n{\r\n    \"ip\": \"46.19.37.108\",\r\n    \"country_code\": \"NL\",\r\n    \"country_code3\": \"NLD\",\r\n    \"country\": \"Netherlands\",\r\n    \"continent_code\": \"EU\",\r\n    \"latitude\": 52.5,\r\n    \"longitude\": 5.75,\r\n    \"dma_code\": \"0\",\r\n    \"area_code\": \"0\",\r\n    \"asn\": \"AS196752\",\r\n    \"isp\": \"Tilaa V.O.F.\",\r\n    \"timezone\":\"Europe/Amsterdam\"\r\n}\r\n~~~\r\n\r\nDetails\r\n\r\n- **ip** (Visitor IP address, or IP address specified as parameter)\r\n- **country_code** (Two-letter ISO 3166-1 alpha-2 country code)\r\n- **country_code3** (Three-letter ISO 3166-1 alpha-3 country code)\r\n- **country** (Name of the country)\r\n- **region_code** (Two-letter ISO-3166-2 state / region code)\r\n- **region** (Name of the region)\r\n- **city** (Name of the city)\r\n- **postal_code** (Postal code / Zip code)\r\n- **continent_code** (Two-letter continent code)\r\n- **latitude** (Latitude)\r\n- **longitude** (Longitude)\r\n- **dma_code** (DMA Code)\r\n- **area_code** (Area Code)\r\n- **asn** (Autonomous System Number)\r\n- **isp** (Internet service provider)\r\n- **timezone** (Time Zone)\r\n\r\n\r\n## Options\r\n\r\n- **ip** : if not set, give request ip.\r\n- **JSONP** : if set give JSONP output, default format is json. I do not like JSONP ;)\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Julien Valéry\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n",
  "_id": "satelize@0.1.0",
  "dist": {
    "shasum": "846863e7deaea1d17c94f0f907804b465aa297db",
    "tarball": "http://registry.npmjs.org/satelize/-/satelize-0.1.0.tgz"
  },
  "_from": "satelize@^0.1.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "darul75",
    "email": "darul75@gmail.com"
  },
  "maintainers": [
    {
      "name": "darul75",
      "email": "darul@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "846863e7deaea1d17c94f0f907804b465aa297db",
  "_resolved": "https://registry.npmjs.org/satelize/-/satelize-0.1.0.tgz"
}
